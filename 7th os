#include <stdio.h>
#include <string.h>

void main() {
    int alloc[10][10], max[10][10], need[10][10];
    int avail[10], total[10], work[10];
    int n, m, i, j, k, count = 0, c;
    char finish[10];

    printf("Enter the number of processes and resources: ");
    scanf("%d %d", &n, &m);

    for (i = 0; i < n; i++)
        finish[i] = 'n';

    printf("Enter the Claim (Max) matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter the Allocation matrix:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &alloc[i][j]);

    printf("Enter the Total Resource vector:\n");
    for (i = 0; i < m; i++)
        scanf("%d", &total[i]);

    // Calculate Available Resources
    for (i = 0; i < m; i++)
        avail[i] = 0;

    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            avail[j] += alloc[i][j];

    for (i = 0; i < m; i++)
        work[i] = total[i] - avail[i];

    // Calculate Need matrix
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            need[i][j] = max[i][j] - alloc[i][j];

    // Begin Banker's Algorithm
    while (count < n) {
        int found = 0;

        for (i = 0; i < n; i++) {
            if (finish[i] == 'n') {
                c = 0;
                for (j = 0; j < m; j++) {
                    if (need[i][j] <= work[j])
                        c++;
                }

                if (c == m) {
                    printf("\nAll resources can be allocated to Process %d\n", i + 1);
                    for (k = 0; k < m; k++) {
                        work[k] += alloc[i][k];
                    }

                    printf("Available resources after executing process %d: ", i + 1);
                    for (k = 0; k < m; k++)
                        printf("%4d", work[k]);
                    printf("\n");

                    finish[i] = 'y';
                    printf("Process %d executed? %c\n", i + 1, finish[i]);
                    count++;
                    found = 1;
                }
            }
        }

        if (!found) {
            printf("\nSystem is not in a safe state. Deadlock possible.\n");
            return;
        }
    }

    printf("\nSystem is in a safe state.\n");
}