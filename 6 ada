#include <stdio.h>
#include <conio.h>

void build_heap(int[], int);
void heapify(int[], int, int);
void heap_sort(int[], int);

void main() {
    int a[10], i, n;
    clrscr(); 
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    printf("Enter the elements:\n");
    for(i = 0; i < n; i++) {
        scanf("%d", &a[i]);
    }

    build_heap(a, n);  
    heap_sort(a, n);   

    printf("The sorted array is:\n");
    for(i = 0; i < n; i++) {
        printf("%d\t", a[i]);
    }

    getch();
}

void build_heap(int a[], int n) {
    int p;
    for(p = (n - 1) / 2; p >= 0; p--) {
        heapify(a, n, p);
    }
}

void heapify(int a[], int n, int p) {
    int item, c;
    item = a[p];
    c = 2 * p + 1;

    while(c <= n - 1) {
        if(c + 1 <= n - 1 && a[c] < a[c + 1]) {
            c = c + 1;
        }

        if(item < a[c]) {
            a[p] = a[c];
            p = c;
            c = 2 * p + 1;
        } else {
            break;
        }
    }
    a[p] = item;
}

void heap_sort(int a[], int n) {
    int i, temp;
    for(i = n - 1; i > 0; i--) {
        temp = a[0];
        a[0] = a[i];
        a[i] = temp;
        heapify(a, i, 0);
    }
}















----------------------------------------------------------------time_complexity----------------------------------------------------------------------------------------

#include<time.h>
void build_heap(int[], int);
void heapify(int[], int, int);
void heap_sort(int[], int);
void main()
{
int a[16000], i; long int n=500; clock_t start,end;
clrscr();
while(n <= 16000)
{
for(i=0;i<=n-1;i++)
{
a[i]=rand();
}
start=clock();
build_heap(a,n);
heap_sort(a,n);
end=clock();
printf("\nthe time taken for n=%lu is %f\n", n,(end - start)/CLK_TCK);
n=n+1000;
}
getch();
}
